# Config file for hyperparameter definition
data: 'DukeKiTS'
train: true
fine_tune: False
learning_rate: 0.0003
epochs: 1500
logs: 'duke_kits_exp1'
device: 'cuda'
val_interval: 5
data_dir: '/PATH/TO/MASKS'
kits_data_dir: '/PATH/TO/KITS21'

# Cache dataset to be used for faster data loading during training, Dataset to be used during validation. See: https://docs.monai.io/en/stable/data.html#cachedataset
# dataset: CacheDataset
dataset: Dataset
cache_rate: 1

train_val_test_split: [0.75, 0.25, 0]
use_seed: false
seed: 0
save_model_when: 0.9 # Metric has to be greater than this value for the model to be saved

# Dataloader - to be optimized for training speed, depending of the GPU memory
dataloader:
  batch_size: 40
  num_workers: 2
  shuffle: true

# Optimizer
optimizer: 
  name: 'Adam'
  learning_rate: 0.0003
  betas: [0.9, 0.999]
  epsilon: 0.00000008
  weight_decay: 0.00001

# Learning rate scheduler
sceduler:
  name: 'CosineAnnealingWarmRestarts'
  T_0: 100
  eta_min: 1e-5 

# Loss function
loss:
  name: 'DiceLoss'
  include_background: true
  softmax: true

# Metric 
metric:
  name: 'DiceMetric'
  include_background: False
  reduction: 'mean_batch'

sliding_window_roi: [96, 96, 96]

model:
  name: 'UNet'
  spatial_dims: 3
  in_channels: 1
  out_channels: 4
  kernel_size: 3
  up_kernel_size: 3
  channels: [32, 64, 128, 256, 512]
  strides: [2, 2, 2, 2]
  num_res_units: 3
  dropout: 0.3
  norm: 'instance'

# Train transformations
train_transforms:
  LoadImaged_im:
      keys: ['image']
      ensure_channel_first: true
  ReadNrrdMaskd:
      keys: ['mask']
  Spacingd_im:
      keys: ['image']
      pixdim: [2.5, 2.5, 2.5]
  Spacingd_seg:
      keys: ['mask']
      pixdim: [2.5, 2.5, 2.5]
      mode: 'nearest'
  Transposed:
      keys: ['image', 'mask']
      indices: [0, 2, 3, 1]
  Flipd:
      keys: ['mask']
      spatial_axis: [2]
  WindowindCTBasedOnPercentiled:
      keys: ['image']
  SpatialPadd:
      keys: ['image', 'mask']
      spatial_size: [96, 96, 96]
  RandSpatialCropSamplesd:
      keys: ['image', 'mask']
      roi_size: [96, 96, 96]
      num_samples: 1
      random_size: false
  RandAdjustContrastd:
      keys: ['image']
      prob: 0.2
      gamma: [0.5, 1]
  RandGaussianSmoothd:
      keys: ['image']
      prob: 0.2
      sigma_x: [0.15, 0.3]
      sigma_y: [0.15, 0.3]
      sigma_z: [0.15, 0.3]
  RandShiftIntensityd:
      keys: ['image']
      prob: 0.2
      offsets: 0.1
  RandGaussianNoised:
      keys: ['image']
      prob: 0.2
      mean: 0
      std: 0.08
  ThresholdIntensityd_clip_upper:
      keys: ['image']
      threshold: 1.0
      above: False
      cval: 1.0
  ThresholdIntensityd_clip_lower:
      keys: ['image']
      threshold: 0.0
      above: True
      cval: 0.0
  ToTensord:
      keys: ['image', 'mask']

# Validation transformations - possibly these should be the same as the Train transforms
eval_transforms:
  LoadImaged_im:
      keys: ['image']
      ensure_channel_first: true
  ReadNrrdMaskd:
      keys: ['mask']
  Spacingd_im:
      keys: ['image']
      pixdim: [1.5, 1.5, 1.5]
  Spacingd_seg:
      keys: ['mask']
      pixdim: [1.5, 1.5, 1.5]
      mode: 'nearest'
  Transposed:
      keys: ['image', 'mask']
      indices: [0, 2, 3, 1]
  Flipd:
      keys: ['mask']
      spatial_axis: [2]
  WindowindCTBasedOnPercentiled:
      keys: ['image']
  SpatialPadd:
      keys: ['image', 'mask']
      spatial_size: [96, 96, 96]
  ToTensord:
      keys: ['image', 'mask']

# Post prediction transformations
post_pred_transforms:
  EnsureType:
  AsDiscrete:
      argmax: true
      to_onehot: 4